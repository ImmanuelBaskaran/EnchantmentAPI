var NAME = 'EnchantmentAPI v1.0.1';
var AUTHORS = [];
var DESCRIPTION;
var DEPENDS = [
'MCCore'];
var SOFTDEPENDS = [
'SkillAPI'];
var LOAD_BEFORE = [
];
var PACKAGES = ['com.sucy.enchant.api', 'com.sucy.enchant.cmd', 'com.sucy.enchant.data', 'com.sucy.enchant.listener', 'com.sucy.enchant.mechanics', 'com.sucy.enchant.skillapi', 'com.sucy.enchant.util', 'com.sucy.enchant.vanilla', 'com.sucy.enchant'];
var CLASSES = [
    [
        {name: 'Cooldowns', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.api.Cooldowns <br><br>Helper class for managing cooldowns for enchantments', ext: 0, impl: [], constructors: [], methods: [{name: 'configure', description: 'Configures the cooldown for an enchantment <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'settings', type: 'final Settings', description: 'settings of the enchantment'}, {name: 'base', type: 'final double', description: 'base value to configure'}, {name: 'scale', type: 'final double', description: 'scaling value to configure'}]}, {name: 'onCooldown', description: 'Checks whether or not the enchantment is on cooldown <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if on cooldown, false otherwise'}, params: [{name: 'enchant', type: 'final CustomEnchantment', description: 'enchantment to check'}, {name: 'user', type: 'final LivingEntity', description: 'player using the enchantment'}, {name: 'settings', type: 'final Settings', description: 'settings of the enchantment'}, {name: 'level', type: 'final int', description: 'enchantment level'}]}, {name: 'reduce', description: 'Reduces the remaining time of an enchantment\'s cooldown. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'enchant', type: 'final CustomEnchantment', description: 'enchantment to reduce the time for'}, {name: 'user', type: 'final LivingEntity', description: 'player using the enchantment'}, {name: 'millis', type: 'final long', description: 'time to reduce by in milliseconds'}]}, {name: 'secondsLeft', description: 'Computes the number of seconds left on the enchantment\'s cooldown, rounded up to the nearest second. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'seconds left'}, params: [{name: 'enchant', type: 'final CustomEnchantment', description: 'enchantment'}, {name: 'user', type: 'final LivingEntity', description: 'player using the enchantment'}, {name: 'settings', type: 'final Settings', description: 'settings of the enchantment'}, {name: 'level', type: 'final int', description: 'enchantment level'}]}, {name: 'start', description: 'Starts the cooldown of an enchantment <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'enchant', type: 'final CustomEnchantment', description: 'enchantment to start for'}, {name: 'user', type: 'final LivingEntity', description: 'player using the enchantment'}]}], fields: [{name: 'Cooldowns', description: 'EnchantmentAPI © 2017 com.sucy.enchant.api.Cooldowns <br><br>Helper class for managing cooldowns for enchantments', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CustomEnchantment', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 1, description: 'EnchantmentAPI © 2017 com.sucy.enchant.api.CustomEnchantment', ext: 0, impl: ['Comparable<CustomEnchantment>'], constructors: [{name: 'CustomEnchantment', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: '', description: ''}, params: [{name: 'name', type: 'final String', description: ''}, {name: 'description', type: 'final String', description: ''}]}], methods: [{name: 'addNaturalItems', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'materials', type: 'final Material...', description: ''}]}, {name: 'addToEnchantment', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'enchantments', type: 'final Map<Enchantment, Integer>', description: ''}, {name: 'result', type: 'final ItemStack', description: ''}, {name: 'level', type: 'final int', description: ''}]}, {name: 'addToItem', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack', description: 'item with the enchantment'}, params: [{name: 'item', type: 'final ItemStack', description: 'item to add to'}, {name: 'level', type: 'final int', description: 'enchantment level'}]}, {name: 'applyBreak', description: 'Applies effects while breaking blocks (for tool effects) <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'user', type: 'final LivingEntity', description: 'the player with the enchantment'}, {name: 'block', type: 'final Block', description: 'the block being broken'}, {name: 'level', type: 'final int', description: ''}, {name: 'event', type: 'final BlockEvent', description: 'the event details (either BlockBreakEvent or BlockDamageEvent)'}]}, {name: 'applyDefense', description: 'Applies the enchantment defensively (when taking damage) <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'user', type: 'final LivingEntity', description: 'the entity hat has the enchantment'}, {name: 'target', type: 'final LivingEntity', description: 'the entity that attacked the enchantment, can be null'}, {name: 'level', type: 'final int', description: 'the level of the used enchantment'}, {name: 'event', type: 'final EntityDamageEvent', description: 'the event details (EntityDamageByEntityEvent, EntityDamageByBlockEvent, or just EntityDamageEvent)'}]}, {name: 'applyEquip', description: 'Applies effects when the item is equipped <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'user', type: 'final LivingEntity', description: 'the player that equipped it'}, {name: 'level', type: 'final int', description: 'the level of enchantment'}]}, {name: 'applyInteractBlock', description: 'Applies effects when the player left or right clicks (For other kinds of enchantments like spells) <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'user', type: 'final Player', description: 'the player with the enchantment'}, {name: 'level', type: 'final int', description: ''}, {name: 'event', type: 'final PlayerInteractEvent', description: 'the event details'}]}, {name: 'applyInteractEntity', description: 'Applies effects when the player interacts with an entity <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'user', type: 'final Player', description: 'player with the enchantment'}, {name: 'level', type: 'final int', description: 'enchantment level'}, {name: 'event', type: 'final PlayerInteractEntityEvent', description: 'the event details'}]}, {name: 'applyOnHit', description: 'Applies the enchantment affect when attacking someone <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'user', type: 'final LivingEntity', description: 'the entity that has the enchantment'}, {name: 'target', type: 'final LivingEntity', description: 'the entity that was struck by the enchantment'}, {name: 'level', type: 'final int', description: 'the level of the used enchantment'}, {name: 'event', type: 'final EntityDamageByEntityEvent', description: 'the event details'}]}, {name: 'applyProjectile', description: 'Applies effects when firing a projectile <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'user', type: 'final LivingEntity', description: 'entity firing the projectile'}, {name: 'level', type: 'final int', description: 'enchantment level'}, {name: 'event', type: 'final ProjectileLaunchEvent', description: 'the event details'}]}, {name: 'applyUnequip', description: 'Applies effects when the item is unequipped <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'user', type: 'final LivingEntity', description: 'the player that unequipped it'}, {name: 'level', type: 'final int', description: 'the level of enchantment'}]}, {name: 'canEnchantOnto', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if can go onto the item, not including conflicts with other enchantments'}, params: [{name: 'item', type: 'final ItemStack', description: 'item to check'}]}, {name: 'canStack', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'whether or not having the enchantment on multiple items stacks their effects'}, params: []}, {name: 'compareTo', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: [{name: 'other', type: 'final CustomEnchantment', description: ''}]}, {name: 'computeLevel', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'enchantment level'}, params: [{name: 'expLevel', type: 'final int', description: 'enchanting level (from enchanting table)'}]}, {name: 'conflictsWith', description: 'Checks whether or not this enchantment works with all of the given enchantments <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if there is a conflict, false otherwise'}, params: [{name: 'enchantments', type: 'final List<CustomEnchantment>', description: 'enchantments to check against'}, {name: 'same', type: 'final boolean', description: 'whether or not to allow the same enchantment (in case of merging)'}]}, {name: 'conflictsWith', description: 'Checks whether or not this enchantment works with all of the given enchantments <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if there is a conflict, false otherwise'}, params: [{name: 'same', type: 'final boolean', description: 'whether or not to allow the same enchantment (in case of merging)'}, {name: 'enchantments', type: 'final CustomEnchantment...', description: 'enchantments to check against'}]}, {name: 'conflictsWith', description: 'Checks whether or not this enchantment works with the given enchantment <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if there is a conflict, false otherwise'}, params: [{name: 'other', type: 'final CustomEnchantment', description: 'enchantment to check against'}, {name: 'same', type: 'final boolean', description: 'whether or not to allow the same enchantment (in case of merging)'}]}, {name: 'equals', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 'other', type: 'final Object', description: ''}]}, {name: 'getCombineCostPerLevel', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'getDescription', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'details for the enchantment to show in the details book'}, params: []}, {name: 'getEnchantLevelBuffer', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: ''}, params: []}, {name: 'getEnchantLevelScaleFactor', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: ''}, params: []}, {name: 'getGroup', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: ''}, params: []}, {name: 'getMaxLevel', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'the max level the enchantment can normally reach via combining enchantments'}, params: []}, {name: 'getMaxTableLevel', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'the max level the enchantment can be from an enchanting table'}, params: []}, {name: 'getMinEnchantingLevel', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'minimum modified enchantment level needed to receive this enchantment'}, params: []}, {name: 'getName', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'name of the enchantment that shows up in the lore'}, params: []}, {name: 'getNaturalItems', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Set<Material>', description: ''}, params: []}, {name: 'getPermission', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'permission used by the enchantment'}, params: []}, {name: 'getSaveFolder', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'String', description: ''}, params: []}, {name: 'getWeight', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: ''}, params: [{name: 'material', type: 'final Material', description: ''}]}, {name: 'hashCode', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'hasPermission', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if they have permission, false otherwise'}, params: [{name: 'permissible', type: 'final Permissible', description: 'person to receive the enchantment'}]}, {name: 'isEnabled', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'whether or not the enchantment is obtainable without commands'}, params: []}, {name: 'isTableEnabled', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'whether or not the enchantment is obtainable'}, params: []}, {name: 'load', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'plugin', type: 'final EnchantmentAPI', description: ''}]}, {name: 'removeFromItem', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack', description: 'item without this enchantment'}, params: [{name: 'item', type: 'final ItemStack', description: 'item to remove from'}]}, {name: 'save', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'plugin', type: 'final EnchantmentAPI', description: ''}]}, {name: 'setCombineCostPerLevel', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'combineCostPerLevel', type: 'final int', description: ''}]}, {name: 'setEnchantLevelBuffer', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'enchantLevelBuffer', type: 'final double', description: ''}]}, {name: 'setEnchantLevelScaleFactor', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'enchantLevelScaleFactor', type: 'final double', description: ''}]}, {name: 'setGroup', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'group', type: 'final String', description: ''}]}, {name: 'setMaxLevel', description: 'Sets both the max table level and combine level to the given amount. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'maxLevel', type: 'final int', description: 'max normally obtainable level'}]}, {name: 'setMaxLevel', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'maxLevel', type: 'final int', description: ''}, {name: 'maxTableLevel', type: 'final int', description: ''}]}, {name: 'setMinEnchantingLevel', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'minEnchantingLevel', type: 'final double', description: ''}]}, {name: 'setWeight', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'weight', type: 'final double', description: ''}]}, {name: 'setWeight', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'material', type: 'final Material', description: ''}, {name: 'weight', type: 'final double', description: ''}]}, {name: 'toString', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: ''}, params: []}], fields: [{name: 'CustomEnchantment', description: 'EnchantmentAPI © 2017 com.sucy.enchant.api.CustomEnchantment', isStatic: 0, isFinal: 0, isAbstract: 1, type: '', scope: 'public'}, {name: 'DEFAULT_GROUP', description: 'Default conflict group for enchantments. Using this group causes the enchantment not to conflict with any other enchantments.', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'settings', isStatic: 0, isFinal: 0, isAbstract: 0, type: 'Settings', scope: 'protected'}], scope: 'public'},
        {name: 'Enchantments', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.api.Enchantments', ext: 0, impl: [], constructors: [], methods: [{name: 'clearAllEquipmentData', description: 'Clears equipment data for all players, forcing all equipment to refresh', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'clearEquipmentData', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'final Player', description: 'player to clear equipment data for (will refresh next access)'}]}, {name: 'getAllEnchantments', description: 'Gets all enchantments on an item, including vanilla enchantments. This wraps vanilla enchantments in the CustomEnchantment class for more visibility on their settings. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Map<CustomEnchantment,Integer>', description: 'all enchantments on the item and their levels'}, params: [{name: 'item', type: 'final ItemStack', description: 'item to get enchantments for.'}]}, {name: 'getCustomEnchantments', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Map<CustomEnchantment,Integer>', description: 'list of custom enchantments (does not include vanilla enchantments)'}, params: [{name: 'item', type: 'final ItemStack', description: 'item to grab the enchantments from'}]}, {name: 'getEnchantments', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Map<CustomEnchantment,Integer>', description: 'combined enchantments on all active equipment the player has'}, params: [{name: 'player', type: 'final Player', description: 'player to get enchantments for'}]}, {name: 'getEquipmentData', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerEquips', description: 'the equipment data tracking the player\'s enchantments'}, params: [{name: 'player', type: 'final Player', description: 'player to get equipment data for'}]}, {name: 'hasCustomEnchantment', description: 'Checks whether or not the item has the enchantment on it <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if it has the enchantment, false otherwise'}, params: [{name: 'item', type: 'final ItemStack', description: 'item to check'}, {name: 'enchantmentName', type: 'final String', description: 'name of the enchantment to check for'}]}, {name: 'removeAllEnchantments', description: 'Removes all enchantments from the item, including vanilla enchantments <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack', description: 'item with all enchantments removed'}, params: [{name: 'item', type: 'final ItemStack', description: 'item to remove all enchantments from'}]}, {name: 'removeCustomEnchantments', description: 'Removes all custom enchantments from an item <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack', description: 'item without custom enchantments'}, params: [{name: 'item', type: 'final ItemStack', description: 'item to remove enchantments from'}]}], fields: [{name: 'Enchantments', description: 'EnchantmentAPI © 2017 com.sucy.enchant.api.Enchantments', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'GlowEffects', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.api.GlowEffects', ext: 0, impl: [], constructors: [], methods: [{name: 'finalize', description: 'Ensures an item has a glowing effect if it has any enchantments, custom or not. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack', description: 'item with the glowing effect'}, params: [{name: 'item', type: 'final ItemStack', description: 'item to give glowing effects to'}]}], fields: [{name: 'GlowEffects', description: 'EnchantmentAPI © 2017 com.sucy.enchant.api.GlowEffects', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Settings', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.api.Settings', ext: 'DataSection', impl: [], constructors: [], methods: [{name: 'get', description: 'Gets a scaling setting based on the provided level <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'scaled setting value'}, params: [{name: 'key', type: 'final String', description: 'setting key'}, {name: 'level', type: 'final int', description: 'enchantment level'}]}, {name: 'set', description: 'Sets a scaling configuration setting <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'final String', description: 'setting key'}, {name: 'base', type: 'final double', description: 'base value (at enchantment level 1)'}, {name: 'scale', type: 'final double', description: 'value scale (extra per enchantment level)'}]}], fields: [{name: 'Settings', description: 'EnchantmentAPI © 2017 com.sucy.enchant.api.Settings', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Tasks', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.api.Tasks <br><br>Utility class providing ways to register tasks through EnchantmentAPI', ext: 0, impl: [], constructors: [], methods: [{name: 'schedule', description: 'Schedules a task to run continuously <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'BukkitTask', description: 'task handling the runnable'}, params: [{name: 'runnable', type: 'final Runnable', description: 'runnable to execute'}, {name: 'delay', type: 'final int', description: 'delay in ticks before running the task the first time'}, {name: 'interval', type: 'final int', description: 'time in ticks between each subsequent execution'}]}, {name: 'schedule', description: 'Schedules a task to run a given number of times <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'BukkitTask', description: 'task handling the runnable'}, params: [{name: 'runnable', type: 'final Runnable', description: 'runnable to execute'}, {name: 'delay', type: 'final int', description: 'delay in ticks before running the task the first time'}, {name: 'interval', type: 'final int', description: 'time in ticks between each subsequent execution'}, {name: 'repetitions', type: 'int', description: 'number of times the task should run'}]}, {name: 'schedule', description: 'Schedules a task to run next tick <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'BukkitTask', description: 'task handling the runnable'}, params: [{name: 'runnable', type: 'final Runnable', description: 'runnable to execute'}]}, {name: 'schedule', description: 'Schedules a task to run after the specified number of ticks <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'BukkitTask', description: 'task handling the runnable'}, params: [{name: 'runnable', type: 'final Runnable', description: 'runnable to execute'}, {name: 'delay', type: 'final int', description: 'number of ticks to wait'}]}], fields: [{name: 'Tasks', description: 'EnchantmentAPI © 2017 com.sucy.enchant.api.Tasks <br><br>Utility class providing ways to register tasks through EnchantmentAPI', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'CmdAdd', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.cmd.CmdAdd', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'CmdAdd', description: 'EnchantmentAPI © 2017 com.sucy.enchant.cmd.CmdAdd', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdBook', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.cmd.CmdBook', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'CmdBook', description: 'EnchantmentAPI © 2017 com.sucy.enchant.cmd.CmdBook', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdGraph', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.cmd.CmdGraph', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'CmdGraph', description: 'EnchantmentAPI © 2017 com.sucy.enchant.cmd.CmdGraph', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdReload', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.cmd.CmdReload', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'CmdReload', description: 'EnchantmentAPI © 2017 com.sucy.enchant.cmd.CmdReload', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CmdRemove', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.cmd.CmdRemove', ext: 0, impl: ['IFunction'], constructors: [], methods: [{name: 'execute', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'CmdRemove', description: 'EnchantmentAPI © 2017 com.sucy.enchant.cmd.CmdRemove', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Commands', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.cmd.Commands', ext: 0, impl: [], constructors: [], methods: [{name: 'init', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'plugin', type: 'final EnchantmentAPI', description: ''}]}], fields: [{name: 'Commands', description: 'EnchantmentAPI © 2017 com.sucy.enchant.cmd.Commands', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'Configuration', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.data.Configuration', ext: 0, impl: [], constructors: [], methods: [{name: 'amount', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: [{name: 'configKey', type: 'final ConfigKey', description: ''}]}, {name: 'reload', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'plugin', type: 'final EnchantmentAPI', description: ''}]}, {name: 'using', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 'configKey', type: 'final ConfigKey', description: ''}]}], fields: [{name: 'Configuration', description: 'EnchantmentAPI © 2017 com.sucy.enchant.data.Configuration', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Enchantability', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.data.Enchantability', ext: 0, impl: [], constructors: [], methods: [{name: 'determine', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: [{name: 'material', type: 'final Material', description: ''}]}, {name: 'init', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'enchantmentAPI', type: 'final EnchantmentAPI', description: ''}]}], fields: [{name: 'Enchantability', description: 'EnchantmentAPI © 2017 com.sucy.enchant.data.Enchantability', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Path', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.data.Path', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'DATA_FOLDER', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'Path', description: 'EnchantmentAPI © 2017 com.sucy.enchant.data.Path', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Permission', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.data.Permission', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'ENCHANT', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'ENCHANT_VANILLA', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'Permission', description: 'EnchantmentAPI © 2017 com.sucy.enchant.data.Permission', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerEquips', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.data.PlayerEquips', ext: 0, impl: [], constructors: [{name: 'PlayerEquips', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'player', type: 'final Player', description: ''}]}], methods: [{name: 'clear', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'final Player', description: ''}]}, {name: 'clearWeapon', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'final Player', description: ''}]}, {name: 'getEnchantments', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Map<CustomEnchantment,Integer>', description: ''}, params: []}, {name: 'update', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'final Player', description: ''}]}, {name: 'updateWeapon', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'inventory', type: 'final PlayerInventory', description: ''}]}], fields: [{name: 'ARMOR_TYPES', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'Set<Material>', scope: 'public'}, {name: 'PlayerEquips', description: 'EnchantmentAPI © 2017 com.sucy.enchant.data.PlayerEquips', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'AnvilListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.listener.AnvilListener', ext: 'BaseListener', impl: [], constructors: [], methods: [{name: 'onClick', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'InventoryClickEvent', description: ''}]}, {name: 'onCombine', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final PrepareAnvilEvent', description: ''}]}], fields: [{name: 'AnvilListener', description: 'EnchantmentAPI © 2017 com.sucy.enchant.listener.AnvilListener', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'BaseListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 1, description: 'EnchantmentAPI © 2017 com.sucy.enchant.listener.BaseListener', ext: 0, impl: ['Listener'], constructors: [], methods: [{name: 'cleanUp', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'plugin', type: 'final EnchantmentAPI', description: ''}]}, {name: 'init', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'plugin', type: 'final EnchantmentAPI', description: ''}]}], fields: [{name: 'BaseListener', description: 'EnchantmentAPI © 2017 com.sucy.enchant.listener.BaseListener', isStatic: 0, isFinal: 0, isAbstract: 1, type: '', scope: 'public'}], scope: 'public'},
        {name: 'EnchantListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.listener.EnchantListener', ext: 'BaseListener', impl: [], constructors: [], methods: [{name: 'cleanUp', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'plugin', type: 'final EnchantmentAPI', description: ''}]}, {name: 'init', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'plugin', type: 'final EnchantmentAPI', description: ''}]}, {name: 'onClick', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final InventoryClickEvent', description: ''}]}, {name: 'onClose', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final InventoryCloseEvent', description: ''}]}, {name: 'onEnchant', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final EnchantItemEvent', description: ''}]}, {name: 'onJoin', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final PlayerJoinEvent', description: ''}]}, {name: 'onPrepareEnchant', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final PrepareItemEnchantEvent', description: ''}]}, {name: 'onQuit', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final PlayerQuitEvent', description: ''}]}], fields: [{name: 'EnchantListener', description: 'EnchantmentAPI © 2017 com.sucy.enchant.listener.EnchantListener', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'FishingListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.listener.FishingListener', ext: 'BaseListener', impl: [], constructors: [], methods: [{name: 'onCatch', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final PlayerFishEvent', description: ''}]}], fields: [{name: 'FishingListener', description: 'EnchantmentAPI © 2017 com.sucy.enchant.listener.FishingListener', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ItemListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.listener.ItemListener', ext: 'BaseListener', impl: [], constructors: [], methods: [{name: 'onBreak', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final BlockBreakEvent', description: ''}]}, {name: 'onBreak', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final PlayerItemBreakEvent', description: ''}]}, {name: 'onClose', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final InventoryCloseEvent', description: ''}]}, {name: 'onDrop', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final PlayerDropItemEvent', description: ''}]}, {name: 'onHeld', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final PlayerItemHeldEvent', description: ''}]}, {name: 'onHit', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final EntityDamageByEntityEvent', description: ''}]}, {name: 'onInteract', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final PlayerInteractEvent', description: ''}]}, {name: 'onInteractBlock', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final PlayerInteractEvent', description: ''}]}, {name: 'onInteractEntity', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final PlayerInteractEntityEvent', description: ''}]}, {name: 'onJoin', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final PlayerJoinEvent', description: ''}]}, {name: 'onPickup', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final EntityPickupItemEvent', description: ''}]}, {name: 'onQuit', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final PlayerQuitEvent', description: ''}]}, {name: 'onShoot', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'final ProjectileLaunchEvent', description: ''}]}], fields: [{name: 'ItemListener', description: 'EnchantmentAPI © 2017 com.sucy.enchant.listener.ItemListener', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'EnchantingMechanics', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.mechanics.EnchantingMechanics', ext: 0, impl: [], constructors: [], methods: [{name: 'chance', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: ''}, params: [{name: 'level', type: 'final int', description: ''}, {name: 'enchant', type: 'final CustomEnchantment', description: ''}, {name: 'target', type: 'final int', description: ''}]}, {name: 'enchantabilitySpread', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Map<Integer,Integer>', description: ''}, params: [{name: 'enchantability', type: 'final int', description: ''}]}, {name: 'enchantabilityWeight', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: [{name: 'enchantability', type: 'final int', description: ''}]}, {name: 'generateEnchantments', description: 'Generates an enchantment result for the given item <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'EnchantResult', description: 'enchanting result'}, params: []}, {name: 'getAllValidEnchants', description: 'Get all enchantments which can be applied to the given ItemStack <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<CustomEnchantment>', description: 'List of all applicable enchantments'}, params: [{name: 'item', type: 'final ItemStack', description: 'item to check for applicable enchantments'}, {name: 'enchanter', type: 'final Permissible', description: ''}, {name: 'level', type: 'final int', description: 'modified enchantment level'}, {name: 'table', type: 'final boolean', description: ''}]}, {name: 'hasValidEnchantments', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 'item', type: 'final ItemStack', description: ''}]}, {name: 'maxLevel', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: [{name: 'level', type: 'final int', description: ''}, {name: 'enchantability', type: 'final int', description: ''}]}], fields: [{name: 'EnchantingMechanics', description: 'EnchantmentAPI © 2017 com.sucy.enchant.mechanics.EnchantingMechanics', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'EnchantmentMerger', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.mechanics.EnchantmentMerger', ext: 0, impl: [], constructors: [{name: 'EnchantmentMerger', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: []}], methods: [{name: 'apply', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack', description: ''}, params: [{name: 'item', type: 'final ItemStack', description: ''}]}, {name: 'getCost', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'getCustomCost', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'getVanillaCost', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'merge', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'EnchantmentMerger', description: ''}, params: [{name: 'item', type: 'final ItemStack', description: ''}, {name: 'addCost', type: 'final boolean', description: ''}]}, {name: 'merge', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'enchantment', type: 'final CustomEnchantment', description: ''}, {name: 'level', type: 'final int', description: ''}, {name: 'addCost', type: 'final boolean', description: ''}, {name: 'book', type: 'final boolean', description: ''}]}], fields: [{name: 'EnchantmentMerger', description: 'EnchantmentAPI © 2017 com.sucy.enchant.mechanics.EnchantmentMerger', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'EnchantResult', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.mechanics.EnchantResult', ext: 0, impl: [], constructors: [{name: 'EnchantResult', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'enchantLevel', type: 'final int', description: ''}, {name: 'modifier', type: 'final int', description: ''}]}], methods: [{name: 'getEnchantabilityModifier', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'getEnchantLevel', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'getEnchantments', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Map<CustomEnchantment,Integer>', description: ''}, params: []}, {name: 'getFirstVanillaEnchantment', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Optional<VanillaEnchantment>', description: ''}, params: []}, {name: 'getFirstVanillaLevel', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}], fields: [{name: 'EnchantResult', description: 'EnchantmentAPI © 2017 com.sucy.enchant.mechanics.EnchantResult', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'SkillAPIHook', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.skillapi.SkillAPIHook', ext: 0, impl: [], constructors: [], methods: [{name: 'getEnchantments', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<CustomEnchantment>', description: ''}, params: [{name: 'plugin', type: 'final EnchantmentAPI', description: ''}]}], fields: [{name: 'SkillAPIHook', description: 'EnchantmentAPI © 2017 com.sucy.enchant.skillapi.SkillAPIHook', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'SkillEnchantment', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.skillapi.SkillEnchantment', ext: 'CustomEnchantment', impl: [], constructors: [], methods: [{name: 'applyEquip', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'user', type: 'final LivingEntity', description: ''}, {name: 'level', type: 'final int', description: ''}]}, {name: 'applyInteractBlock', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'applyInteractEntity', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'applyUnequip', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'user', type: 'final LivingEntity', description: ''}, {name: 'level', type: 'final int', description: ''}]}, {name: 'getSaveFolder', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: ''}, params: []}], fields: [{name: 'SkillEnchantment', description: 'EnchantmentAPI © 2017 com.sucy.enchant.skillapi.SkillEnchantment', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'LoreReader', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.util.LoreReader', ext: 0, impl: [], constructors: [], methods: [{name: 'formatEnchantment', description: 'Formats an enchantment name for appending to an item\'s lore. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'lore string for the enchantment'}, params: [{name: 'name', type: 'final String', description: 'enchantment name'}, {name: 'level', type: 'final int', description: 'level of the enchantment'}]}, {name: 'isEnchantment', description: 'Checks whether or not the lore line is the line for the given enchantment <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if the line matches, false otherwise'}, params: [{name: 'line', type: 'final String', description: 'line to check'}, {name: 'enchantmentName', type: 'final String', description: 'name of the enchantment'}]}, {name: 'parseEnchantmentLevel', description: 'Parses a level from a lore line. This expects valid roman numerals to be at the end of the line with no spaces after it, matching the format for enchantments. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'parsed level or 0 if invalid'}, params: [{name: 'text', type: 'final String', description: 'text to parse the level from'}]}, {name: 'parseEnchantmentName', description: 'Parses an enchantment name from a bit of text, assuming the format is "{color}{enchantment} {level}" <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'enchantment name'}, params: [{name: 'text', type: 'final String', description: 'text to parse from'}]}], fields: [{name: 'LoreReader', description: 'EnchantmentAPI © 2017 com.sucy.enchant.util.LoreReader', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'RomanNumerals', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.util.RomanNumerals', ext: 0, impl: [], constructors: [], methods: [{name: 'fromNumerals', description: 'Parses a Roman Numeral string into an integer <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'integer value (0 if invalid string)'}, params: [{name: 'romanNumeral', type: 'final String', description: 'Roman Numeral string to parse'}]}, {name: 'toNumerals', description: 'Gets the Roman Numeral string representing the given value <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'Roman Numeral String'}, params: [{name: 'value', type: 'int', description: 'value to be converted'}]}], fields: [{name: 'RomanNumerals', description: 'EnchantmentAPI © 2017 com.sucy.enchant.util.RomanNumerals', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Utils', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.util.Utils', ext: 0, impl: [], constructors: [], methods: [{name: 'isPresent', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if isPresent, false otherwise'}, params: [{name: 'item', type: 'final ItemStack', description: 'item to check'}]}], fields: [{name: 'Utils', description: 'EnchantmentAPI © 2017 com.sucy.enchant.util.Utils', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'Vanilla', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.vanilla.Vanilla', ext: 0, impl: [], constructors: [], methods: [{name: 'getEnchantment', isStatic: 1, isFinal: 1, isAbstract: 0, scope: 'public', returnValue: {type: 'Optional<CustomEnchantment>', description: ''}, params: [{name: 'name', type: 'final String', description: ''}]}], fields: [{name: 'Vanilla', description: 'EnchantmentAPI © 2017 com.sucy.enchant.vanilla.Vanilla', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'VanillaEnchantment', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.vanilla.VanillaEnchantment', ext: 'CustomEnchantment', impl: [], constructors: [], methods: [{name: 'addToEnchantment', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'enchantments', type: 'final Map<Enchantment, Integer>', description: ''}, {name: 'result', type: 'final ItemStack', description: ''}, {name: 'level', type: 'final int', description: ''}]}, {name: 'addToItem', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack', description: ''}, params: [{name: 'item', type: 'final ItemStack', description: ''}, {name: 'level', type: 'final int', description: ''}]}, {name: 'getEnchantment', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Enchantment', description: ''}, params: []}, {name: 'getSaveFolder', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: ''}, params: []}, {name: 'hasPermission', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 'permissible', type: 'final Permissible', description: ''}]}, {name: 'removeFromItem', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack', description: ''}, params: [{name: 'item', type: 'final ItemStack', description: ''}]}], fields: [{name: 'VanillaEnchantment', description: 'EnchantmentAPI © 2017 com.sucy.enchant.vanilla.VanillaEnchantment', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'EnchantmentAPI', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.EnchantmentAPI', ext: 'JavaPlugin', impl: ['EnchantmentRegistry'], constructors: [], methods: [{name: 'getEnchantment', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'CustomEnchantment', description: 'enchantment with the provided name'}, params: [{name: 'name', type: 'final String', description: 'name of the enchantment (not case-sensitive)'}]}, {name: 'getRegisteredEnchantments', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Collection<CustomEnchantment>', description: 'collection of all registered enchantments including vanilla enchantments'}, params: []}, {name: 'isRegistered', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if the enchantment is registered successfully, false otherwise'}, params: [{name: 'name', type: 'final String', description: 'enchantment name'}]}, {name: 'onDisable', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'onEnable', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'register', description: 'Registers enchantments with the API <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'enchantments', type: 'final CustomEnchantment...', description: 'enchantments to register'}]}], fields: [{name: 'EnchantmentAPI', description: 'EnchantmentAPI © 2017 com.sucy.enchant.EnchantmentAPI', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ]
];
var INTERFACES = [
    [
        {name: 'EnchantmentRegistry', type: 'interface', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.api.EnchantmentRegistry', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'EnchantmentRegistry', description: 'EnchantmentAPI © 2017 com.sucy.enchant.api.EnchantmentRegistry', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'EnchantPlugin', type: 'interface', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.api.EnchantPlugin <br><br>Interface to be implemented by plugins adding new enchantments to the server. EnchantmentAPI will find any plugins implementing this class and call the registration method on enable.', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'EnchantPlugin', description: 'EnchantmentAPI © 2017 com.sucy.enchant.api.EnchantPlugin <br><br>Interface to be implemented by plugins adding new enchantments to the server. EnchantmentAPI will find any plugins implementing this class and call the registration method on enable.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ]
];
var ENUMS = [
    [
        {name: 'ItemSet', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.api.ItemSet', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'ALL', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'ARMOR', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'AXES', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'BOOTS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'BOWS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'CHESTPLATES', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'DURABILITY', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'FISHING', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'GLIDERS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'HELMETS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'HOES', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'ItemSet', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'ItemSet', description: 'EnchantmentAPI © 2017 com.sucy.enchant.api.ItemSet', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'ItemSet', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'LEGGINGS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.CARROT_STICK)', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.CHAINMAIL_BOOTS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.CHAINMAIL_CHESTPLATE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.CHAINMAIL_HELMET', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.CHAINMAIL_LEGGINGS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.DIAMOND_AXE)', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.DIAMOND_BOOTS)', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.DIAMOND_CHESTPLATE)', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.DIAMOND_HELMET)', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.DIAMOND_HOE)', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.DIAMOND_LEGGINGS)', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.DIAMOND_PICKAXE)', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.DIAMOND_SPADE)', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.DIAMOND_SWORD)', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.FLINT_AND_STEEL', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.GOLD_AXE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.GOLD_BOOTS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.GOLD_CHESTPLATE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.GOLD_HELMET', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.GOLD_HOE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.GOLD_LEGGINGS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.GOLD_PICKAXE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.GOLD_SPADE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.GOLD_SWORD', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.IRON_AXE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.IRON_BOOTS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.IRON_CHESTPLATE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.IRON_HELMET', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.IRON_HOE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.IRON_LEGGINGS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.IRON_PICKAXE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.IRON_SPADE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.IRON_SWORD', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.PUMPKIN)', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.STONE_AXE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.STONE_HOE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.STONE_PICKAXE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.STONE_SPADE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material.STONE_SWORD', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'Material[]', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'MISCELLANEOUS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'PICKAXES', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SHIELDS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SHOVELS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SWORDS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'TOOLS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'UTILITY', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'WEAPONS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
        {name: 'ConfigKey', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.data.ConfigKey', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'COLORED_NAMES_IN_ANVILS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'ConfigKey', description: 'EnchantmentAPI © 2017 com.sucy.enchant.data.ConfigKey', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'CUSTOM_FISHING', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'FISHING_ENCHANTING_LEVEL', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'GLOBAL_ANVIL_LEVEL', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'MAX_ENCHANTMENTS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'MAX_MERGED_ENCHANTMENTS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'NON_ENCHANTABLES', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'String', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
        {name: 'VanillaData', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'EnchantmentAPI © 2017 com.sucy.enchant.vanilla.VanillaData', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'ARROW_DAMAGE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'ARROW_FIRE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'ARROW_INFINITE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'ARROW_KNOCKBACK', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'BINDING_CURSE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'boolean', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'boolean', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'DAMAGE_ALL', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'DAMAGE_ARTHROPODS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'DAMAGE_UNDEAD', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'DEPTH_STRIDER', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'DIG_SPEED', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'DURABILITY', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'FIRE_ASPECT', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'FROST_WALKER', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'int', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'int', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'int', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'int', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'int', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'int', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'int', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'int', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'int', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'int', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'int', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'int', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'ItemSet', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'ItemSet', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'KNOCKBACK', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'LOOT_BONUS_BLOCKS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'LOOT_BONUS_MOBS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'LUCK', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'LURE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'MENDING', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'OXYGEN', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'PROTECTION_ENVIRONMENTAL', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'PROTECTION_EXPLOSIONS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'PROTECTION_FALL', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'PROTECTION_FIRE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'PROTECTION_PROJECTILE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SILK_TOUCH', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'String', isStatic: 0, isFinal: 1, isAbstract: 0, type: '', scope: 'public'}, {name: 'SWEEPING_EDGE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'THORNS', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'VanillaData', description: 'EnchantmentAPI © 2017 com.sucy.enchant.vanilla.VanillaData', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'VanillaData', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'VanillaData', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'VanillaEnchantment', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'VANISHING_CURSE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'WATER_WORKER', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ]
];
var EXCEPTIONS = [
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ]
];
var ANNOTATIONS = [
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ]
];
var ALL_CLASSES = ['com.sucy.enchant.listener:AnvilListener', 'com.sucy.enchant.listener:BaseListener', 'com.sucy.enchant.cmd:CmdAdd', 'com.sucy.enchant.cmd:CmdBook', 'com.sucy.enchant.cmd:CmdGraph', 'com.sucy.enchant.cmd:CmdReload', 'com.sucy.enchant.cmd:CmdRemove', 'com.sucy.enchant.cmd:Commands', 'com.sucy.enchant.data:ConfigKey', 'com.sucy.enchant.data:Configuration', 'com.sucy.enchant.api:Cooldowns', 'com.sucy.enchant.api:CustomEnchantment', 'com.sucy.enchant.data:Enchantability', 'com.sucy.enchant.mechanics:EnchantingMechanics', 'com.sucy.enchant.listener:EnchantListener', 'com.sucy.enchant:EnchantmentAPI', 'com.sucy.enchant.mechanics:EnchantmentMerger', 'com.sucy.enchant.api:EnchantmentRegistry', 'com.sucy.enchant.api:Enchantments', 'com.sucy.enchant.api:EnchantPlugin', 'com.sucy.enchant.mechanics:EnchantResult', 'com.sucy.enchant.listener:FishingListener', 'com.sucy.enchant.api:GlowEffects', 'com.sucy.enchant.listener:ItemListener', 'com.sucy.enchant.api:ItemSet', 'com.sucy.enchant.util:LoreReader', 'com.sucy.enchant.data:Path', 'com.sucy.enchant.data:Permission', 'com.sucy.enchant.data:PlayerEquips', 'com.sucy.enchant.util:RomanNumerals', 'com.sucy.enchant.api:Settings', 'com.sucy.enchant.skillapi:SkillAPIHook', 'com.sucy.enchant.skillapi:SkillEnchantment', 'com.sucy.enchant.api:Tasks', 'com.sucy.enchant.util:Utils', 'com.sucy.enchant.vanilla:Vanilla', 'com.sucy.enchant.vanilla:VanillaData', 'com.sucy.enchant.vanilla:VanillaEnchantment'];
